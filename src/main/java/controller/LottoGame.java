package controller;

import static util.Parser.*;
import static view.InputView.*;
import static view.OutputView.*;

import java.util.stream.Collectors;

import model.Lotto;
import model.LottoMachine;
import model.LottoMachineImpl;
import model.LottoMatcher;
import model.LottoNumber;
import model.LottoResult;
import model.Lottos;
import model.Money;
import model.WinningLottoNumbers;

public class LottoGame {
	private final LottoMachine lottoMachine;

	private Lottos lottos;
	private WinningLottoNumbers winningLottoNumbers;

	public LottoGame() {
		this.lottoMachine = new LottoMachineImpl();
		this.lottos = new Lottos();
	}

	public void run() {
		Money money = settingMoney();
		settingManualLotto(money);
		settingAutoGeneratedLotto(money);
		settingWinningNumbers();

		LottoResult lottoResult = lottoStart();
		printLottoResult(lottoResult.getResult(), lottoResult.getLottoPrize().calculateReturnRatio(lottos.getLottosSize()));
	}

	private Money settingMoney() {
		return new Money(readPaymentAmount());
	}

	private void settingManualLotto(Money money) {
		int numOfLottoToBuy = Integer.parseInt(readNumberOfLottoToBuy());
		money.buyLotto(numOfLottoToBuy);

		if (numOfLottoToBuy != 0) {
			printRequestInputLottoNumbers();
		}

		for (int i = 0; i < numOfLottoToBuy; i++) {
			String lottoNumbers = readLottoNumbers();
			addLottoFromUserInput(lottoNumbers);
		}
	}

	private void addLottoFromUserInput(String lottoNumbers) {
		lottos.addLotto(new Lotto(parseNumbersWithComma(lottoNumbers).stream()
			.map(LottoNumber::new)
			.collect(Collectors.toList())));
	}

	private void settingAutoGeneratedLotto(Money money) {
		printNumOfLotto(lottos.getLottosSize(), money.numOfLottoCanBuy());
		lottos.addLotto(lottoMachine.drawMaximumLottoByMoney(money));
		printLottoNumbers(lottos.getLottoNumbersList());
	}

	private void settingWinningNumbers() {
		String winningNumbersUserInput = readWinningNumbers();
		LottoNumber bonus = new LottoNumber(readBonusNumber());
		winningLottoNumbers = new WinningLottoNumbers(parseNumbersWithComma(winningNumbersUserInput), bonus);
	}

	private LottoResult lottoStart() {
		LottoMatcher lottoMatcher = new LottoMatcher(winningLottoNumbers);
		lottoMatcher.matchLottoList(lottos);

		return lottoMatcher.getLottoResult();
	}
}
