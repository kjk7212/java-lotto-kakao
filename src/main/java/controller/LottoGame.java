package controller;

import static util.Parser.*;
import static view.InputView.*;
import static view.OutputView.*;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import model.Lotto;
import model.LottoMachine;
import model.LottoMachineImpl;
import model.LottoMatcher;
import model.LottoNumber;
import model.LottoResult;
import model.Lottos;
import model.Money;
import model.WinningLottoNumbers;

public class LottoGame {
	private final LottoMachine lottoMachine;

	private Lottos lottos;
	private WinningLottoNumbers winningLottoNumbers;

	public LottoGame() {
		this.lottoMachine = new LottoMachineImpl();
	}

	public void run() {
		Money money = settingMoney();
		settingLottos(money);
		settingWinningNumbers();

		LottoResult lottoResult = lottoStart();
		printLottoResult(lottoResult.getResult(), lottoResult.getLottoPrize().calculateReturnRatio(lottos.getLottosSize()));
	}

	private Money settingMoney() {
		return new Money(readPaymentAmount());
	}

	private void settingLottos(Money money) {
		List<Lotto> manualLottos = makeManualLottos(money);
		List<Lotto> autoLottos = (makeAutoGeneratedLottos(money, manualLottos));
		lottos = new Lottos(Stream.concat(manualLottos.stream(), autoLottos.stream()).collect(Collectors.toList()));
		printLottoNumbers(lottos.getLottoNumbersList());
	}

	private List<Lotto> makeManualLottos(Money money) {
		int numOfLottoToBuy = Integer.parseInt(readNumberOfLottoToBuy());
		money.buyLotto(numOfLottoToBuy);

		if (numOfLottoToBuy != 0) {
			printRequestInputLottoNumbers();
		}

		return buyManualLottos(numOfLottoToBuy);
	}

	private List<Lotto> buyManualLottos(int numOfLottoToBuy) {
		List<Lotto> lotto = new ArrayList<>();
		for (int i = 0; i < numOfLottoToBuy; i++) {
			lotto.add(makeLottoFromUserInput(readLottoNumbers()));
		}
		return lotto;
	}

	private Lotto makeLottoFromUserInput(String lottoNumbers) {
		return new Lotto(parseNumbersWithComma(lottoNumbers).stream()
			.map(LottoNumber::new)
			.collect(Collectors.toList()));
	}

	private List<Lotto> makeAutoGeneratedLottos(Money money, List<Lotto> manualLotto) {
		printNumOfLotto(manualLotto.size(), money.numOfLottoCanBuy());
		return lottoMachine.drawMaximumLottoByMoney(money);
	}

	private void settingWinningNumbers() {
		String winningNumbersUserInput = readWinningNumbers();
		LottoNumber bonus = new LottoNumber(readBonusNumber());
		winningLottoNumbers = new WinningLottoNumbers(parseNumbersWithComma(winningNumbersUserInput), bonus);
	}

	private LottoResult lottoStart() {
		LottoMatcher lottoMatcher = new LottoMatcher(winningLottoNumbers);
		lottoMatcher.matchLottoList(lottos);

		return lottoMatcher.getLottoResult();
	}
}
